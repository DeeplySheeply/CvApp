@page "/songs"

<PageTitle>Song List Database</PageTitle>
@using CodeWars.Models
@using CodeWars.Data
@inject SongService songService

<h1>My Song List</h1>

<p>This component demonstrates managing a Song List.</p>

@*Code for displaying the table. This displays data from the song list database*@
@if (songs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button @onclick="@Add" class="btn btn-success">Add</button>
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Artist</th>
                <th>Year</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in songs)
            {
                <tr @onclick="@(() => Show(item.SongId))">
                    <td>@item.Title</td>
                    <td>@item.Artist</td>
                    <td>@item.Year</td>
                </tr>
            }
        </tbody>
    </table>
}

@*Insert form*@
@if (songs != null && mode == MODE.Add) 
{
    <input type="text" placeholder="Title" @bind="@title" />
    <br />
    <input type="text" placeholder="Artist" @bind="@artist" />
    <br />
    <input type="text" placeholder="Year" @bind="@year" />
    <br />
    <button @onclick="@Insert" class="btn btn-warning">Insert</button>
}

@*Update & Delete form*@
@if (songs != null && mode == MODE.EditDelete) 
{
    <input type="hidden" @bind="@songId" />
    <br />
    <input placeholder="First Name" @bind="@title" />
    <br />
    <input placeholder="Last Name" @bind="@artist" />
    <br />
    <input placeholder="School" @bind="@year" />
    <br />
    <button @onclick="@Update" class="btn btn-primary">Update</button>
    <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>
    <button @onclick="@Delete" class="btn btn-danger">Delete</button>
}

@*Razor code starts here*@
@code {

    string songId;
    string title;
    string artist;
    string year;

    Song song;

    // Use an enum to store CRUD oprtations  
    private enum MODE { None, Add, EditDelete };
    MODE mode = MODE.None;

    List<Song>? songs;

    // Methods for managing CRUD operations 
    protected override async Task OnInitializedAsync()
    {
        await load(); //uses method below
    }

    protected async Task load()
    {
        songs = await songService.GetSongsAsync();
    }

    protected void Add()
    {
        ClearFields();
        mode = MODE.Add;
    }

    // This method ensures that a form is empty before adding new data
    protected void ClearFields()
    {
        songId = string.Empty;
        title = string.Empty;
        artist = string.Empty;
        year = string.Empty;
    }

    protected async Task Insert()
    {
        Song s = new Song()
            {
                SongId = Guid.NewGuid().ToString(),
                Title = title,
                Artist = artist,
                Year = year
            };
        await songService.InsertSongAsync(s);
        ClearFields();
        await load();
        mode = MODE.None;
    }

    protected async Task Show(string id)
    {
        song = await songService.GetSongByIdAsync(id);
        songId = song.SongId;
        title = song.Title;
        artist = song.Artist;
        year = song.Year;
        mode = MODE.EditDelete;
    }

    protected async Task Update()
    {
        Song s = new Song()
            {
                SongId = songId,
                Title = title,
                Artist = artist,
                Year = year
            };
        await songService.UpdateSongAsync(songId, s);
        ClearFields();
        await load();
        mode = MODE.None;
    }
    protected async Task Delete()
    {
        await songService.DeleteSongAsync(songId);
        ClearFields();
        await load();
        mode = MODE.None;
    }
}
